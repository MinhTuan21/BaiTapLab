const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const mongoose = require("mongoose");
const User = require("../models/user");

const router = express.Router();
const SECRET_KEY = "21062005";

// üü¢ API Test
router.get("/test", (req, res) => {
    res.send("API ƒëang ho·∫°t ƒë·ªông!");
});
// üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
router.get("/list", async (req, res) => {
    try {
        const users = await User.find();
        res.json(users);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});
// üü¢ ƒêƒÉng k√Ω (Kh√¥ng y√™u c·∫ßu avatar)
router.post("/register", async (req, res) => {
  try {
      console.log("üëâ Nh·∫≠n request ƒëƒÉng k√Ω...");
      console.log("üì© Body:", req.body);

      const { name, email, password } = req.body;

      if (!name || !email || !password) {
          console.log("‚ö†Ô∏è Thi·∫øu th√¥ng tin ƒëƒÉng k√Ω!");
          return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
      }

      const existingUser = await User.findOne({ email });
      if (existingUser) {
          console.log("‚ùå Email ƒë√£ t·ªìn t·∫°i!");
          return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
      }

      const hashedPassword = await bcrypt.hash(password, 10);
      const newUser = new User({ name, email, password: hashedPassword });

      await newUser.save();
      console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:", newUser);

      res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng", user: newUser });
  } catch (error) {
      console.error("üö® L·ªói server:", error);
      res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});

// üü¢ ƒêƒÉng nh·∫≠p
// üü¢ ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
  try {
      const { email, password } = req.body;
      const user = await User.findOne({ email });

      if (!user) return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });

      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

      const token = jwt.sign({ id: user._id, email: user.email }, SECRET_KEY, { expiresIn: "1h" });

      res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", token, user });
  } catch (error) {
      console.error(error);
      res.status(500).json({ message: "L·ªói server" });
  }
});


// üü¢ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
router.get("/:id", async (req, res) => {
    try {
        const user = await User.findById(req.params.id);
        if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

        res.json(user);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});

// üü¢ X√≥a ng∆∞·ªùi d√πng theo ID
router.delete("/:id", async (req, res) => {
    try {
        const deletedUser = await User.findByIdAndDelete(req.params.id);
        if (!deletedUser) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

        res.json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng", user: deletedUser });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});

module.exports = router;
